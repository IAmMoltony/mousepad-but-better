Interface
=========
- Dialog when closing multiple (modified) tabs. Maybe not needed
  since we ask the use what to do when a modified file is closed.
- Tab font color when the file is modified or readonly.
- Test the application with a screen reader and add Atk objects
  where needed.
- Support for tab DND between windows.
- Support for dropping uris inside the window and then open them
  in a new tab.
- Cleanup the menus and make them consistent. For example: we're
  using both file and document atm. The name of the Go menu should
  also be changed to something more descriptive.
- You can't use the Ctrl - v/c/x buttons in the type-ahead bar
  because they are 'registered' by the textview/ui.
- Maybe add a document icon to the recent menu. In a perfect
  situation we shoud detect the mime from the file and not by using
  the mime info from GtkRecentInfo, but this is proabably too much
  work for Mousepad.
- Set the mime type when saving the resent file, not for us, both for
  applications that might use the entire recent history.
- Remove the frame borders from the statusbar (we can entirely drop
  the frames) and add a resize grip. This way it will look like a
  real Gtk statusbar.


Code
====
- Check for code dupplication and make sure the comments are worth
  reading.


Text View
=========
- Replace dialog. This dialog should also provide a find button so
  there is an alternative for the type-ahead feature.


Saving and loading
==================
- Save All option.
- Support for encoding. Only UTF-8 is supported atm for testing.
- The filenames used in the title and tooltips are not UTF-8 safe.
  We also have to make sure _ characters inside a filename do not
  result in mnemonic labels.
- Check if the file is externally modified when switching tabs.


Other
=====
- Implement Gtk print support.
- Maybe a plugin based system for syntax highlighting and GtkSpell.
  We cannot use GtkSourceView with this implementation, because it
  cannot attach to an existing textview (GtkSpell can).


Testing and polishing
=====================
- Profiling the startup time. We can possibly use Frederico's trick
  to optimize the startup time:
  http://primates.ximian.com/~federico/news-2006-03.html#09
- Profiling loading large files (Gtk/Pango has a problem here). This
  also locks some dialogs.
- Checking for memory leaks.
